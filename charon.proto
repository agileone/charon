syntax = "proto3";

package charon;

import "mnemosyne.proto";
import "protot.proto";

service RPC {
    // Authentication

    rpc Login(LoginRequest) returns (LoginResponse) {};
    rpc Logout(LogoutRequest) returns (LogoutResponse) {};
    rpc IsAuthenticated(IsAuthenticatedRequest) returns (IsAuthenticatedResponse) {};

    // Authorization

    rpc IsGranted(IsGrantedRequest) returns (IsGrantedResponse) {};
    rpc BelongsTo(BelongsToRequest) returns (BelongsToResponse) {};

    // CRUD

    rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {};
    rpc ModifyUser(ModifyUserRequest) returns (ModifyUserResponse) {};
    rpc GetUser(GetUserRequest) returns (GetUserResponse) {};
    rpc GetUsers(GetUsersRequest) returns (GetUsersResponse) {};
    rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse) {};

    rpc GetUserPermissions(GetUserPermissionsRequest) returns (GetUserPermissionsResponse) {};
}

message User {
    int64 id = 1;
    string username = 2;
    string first_name = 3;
    string last_name = 4;
    bool is_superuser = 5;
    bool is_active = 6;
    bool is_staff = 7;
    bool is_confirmed = 8;
    protot.Timestamp created_at = 9;
    int64 created_by = 10;
    protot.Timestamp updated_at = 11;
    int64 updated_by = 12;
    repeated string permissions = 13;
}

// Login

message LoginRequest {
    string username = 1;
    string password = 2;
}
message LoginResponse {
    mnemosyne.Token token = 1;
}

// Logout

message LogoutRequest {
    mnemosyne.Token token = 1;
}
message LogoutResponse {}

// IsAuthenticated

message IsAuthenticatedRequest {
    mnemosyne.Token token = 1;
}
message IsAuthenticatedResponse {
    bool is_authenticated = 1;
}

// IsGranted

message IsGrantedRequest {
    mnemosyne.Token token = 1;
    int64 user_id = 2;
    string permission = 3;
}
message IsGrantedResponse {
    bool is_granted = 1;
}

// BelongsTo

message BelongsToRequest {}
message BelongsToResponse {}

// CreateUser

message CreateUserRequest {
    string username = 1;
    string plain_password = 2;
    string secure_password = 3;
    string first_name = 4;
    string last_name = 5;
    protot.NilBool is_superuser = 6;
    protot.NilBool is_active = 7;
    protot.NilBool is_staff = 8;
    protot.NilBool is_confirmed = 9;
}
message CreateUserResponse {
    User user = 1;
}

// GetUser

message GetUserRequest {
    mnemosyne.Token token = 1;
    int64 id = 2;
}
message GetUserResponse {
    User user = 1;
}

// GetUsers

message GetUsersRequest {
    reserved 1 to 99, 102 to 200;
//    protot.NilString username = 1;
//    protot.NilString first_name = 2;
//    protot.NilString last_name = 3;
//    protot.TimestampRange created_at = 98;
//    protot.TimestampRange updated_at = 99;

    protot.NilInt64 offset = 100;
    protot.NilInt64 limit = 101;
//    repeated string sort = 102;
}
message GetUsersResponse {
    repeated User users = 1;
}

// DeleteUser

message DeleteUserRequest {
    int64 id = 1;
}
message DeleteUserResponse {
    int64 affected = 1;
}

// ModifyUser

message ModifyUserRequest {
    int64 id = 1;
    protot.NilString username = 2;
    protot.NilString plain_password = 3;
    protot.NilString secure_password = 4;
    protot.NilString first_name = 5;
    protot.NilString last_name = 6;
    protot.NilBool is_superuser = 7;
    protot.NilBool is_active = 8;
    protot.NilBool is_staff = 9;
    protot.NilBool is_confirmed = 10;
}
message ModifyUserResponse {
    User user = 1;
}

message GetUserPermissionsRequest {
    mnemosyne.Token token = 1;
    int64 user_id = 2;
}
message GetUserPermissionsResponse {
    repeated string permissions = 1;
}