syntax = "proto3";

package charon;

import "mnemosyne.proto";

service RPC {
    // Authentication

    rpc Login(LoginRequest) returns (LoginResponse) {};
    rpc Logout(LogoutRequest) returns (LogoutResponse) {};
    rpc IsAuthenticated(IsAuthenticatedRequest) returns (IsAuthenticatedResponse) {};

    // Authorization

    rpc IsGranted(IsGrantedRequest) returns (IsGrantedResponse) {};
//    rpc BelongsTo(BelongsToRequest) returns (BelongsToResponse) {};

    // CRUD

    rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {};
    rpc ModifyUser(ModifyUserRequest) returns (ModifyUserResponse) {};
    rpc GetUser(GetUserRequest) returns (GetUserResponse) {};
    rpc GetUsers(GetUsersRequest) returns (GetUsersResponse) {};
    rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse) {};
//    rpc Register(RegisterRequest) returns (RegisterResponse) {};
//    rpc ConfirmRegistration(ConfirmRegistrationRequest) returns (ConfirmRegistrationResponse) {};
//    rpc RecoverPassword(RecoverPasswordRequest) returns (RecoverPasswordResponse) {};
//    rpc ConfirmPasswordRecovery(ConfirmPasswordRecoveryRequest) returns (ConfirmPasswordRecoveryResponse) {};
}

message User {
    int64 id = 1;
}

// Login

message LoginRequest {
    string username = 1;
    string password = 2;
}
message LoginResponse {
    mnemosyne.Session session = 1;
}

// Logout

message LogoutRequest {
    mnemosyne.Token token = 1;
}
message LogoutResponse {}

// IsAuthenticated

message IsAuthenticatedRequest {
    mnemosyne.Token token = 1;
}
message IsAuthenticatedResponse {
    bool is_authenticated = 1;
}

// Register

message RegisterRequest {}
message RegisterResponse {}

// ConfirmRegistration

message ConfirmRegistrationRequest {}
message ConfirmRegistrationResponse {}

// RecoverPassword

message RecoverPasswordRequest {}
message RecoverPasswordResponse {}

// ConfirmPasswordRecovery

message ConfirmPasswordRecoveryRequest {}
message ConfirmPasswordRecoveryResponse {}

// IsGranted

message IsGrantedRequest {
    string token = 1;
    int64 user_id = 2;
    string permission = 3;
}
message IsGrantedResponse {
    bool is_granted = 1;
}

// HasPrivileges

message BelongsToRequest {}
message BelongsToResponse {}

// CreateUser

message CreateUserRequest {}
message CreateUserResponse {
    User user = 1;
}

// GetUser

message GetUserRequest {}
message GetUserResponse {
    User user = 1;
}

// GetUsers

message GetUsersRequest {}
message GetUsersResponse {
    repeated User user = 1;
}

// DeleteUser

message DeleteUserRequest {}
message DeleteUserResponse {}

// ModifyUser

message ModifyUserRequest {}
message ModifyUserResponse {}
