// Code generated by protoc-gen-go.
// source: charon.proto
// DO NOT EDIT!

/*
Package charon is a generated protocol buffer package.

It is generated from these files:
	charon.proto

It has these top-level messages:
	LoginRequest
	LoginResponse
	LogoutRequest
	LogoutResponse
	RegisterRequest
	RegisterResponse
	ConfirmRegistrationRequest
	ConfirmRegistrationResponse
	RecoverPasswordRequest
	RecoverPasswordResponse
	ConfirmPasswordRecoveryRequest
	ConfirmPasswordRecoveryResponse
	IsGrantedRequest
	IsGrantedResponse
	HasPrivilegesRequest
	HasPrivilegesResponse
	CreateUserRequest
	CreateUserResponse
	GetUserRequest
	GetUserResponse
	GetUsersRequest
	GetUsersResponse
	DeleteUserRequest
	DeleteUserResponse
	ModifyUserRequest
	ModifyUserResponse
*/
package charon

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import mnemosyne1 "github.com/piotrkowalczuk/mnemosyne"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type LoginRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *LoginRequest) Reset()         { *m = LoginRequest{} }
func (m *LoginRequest) String() string { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()    {}

type LoginResponse struct {
	Session *mnemosyne1.Session `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
}

func (m *LoginResponse) Reset()         { *m = LoginResponse{} }
func (m *LoginResponse) String() string { return proto.CompactTextString(m) }
func (*LoginResponse) ProtoMessage()    {}

func (m *LoginResponse) GetSession() *mnemosyne1.Session {
	if m != nil {
		return m.Session
	}
	return nil
}

type LogoutRequest struct {
	SessionId *mnemosyne1.ID `protobuf:"bytes,1,opt,name=session_id" json:"session_id,omitempty"`
}

func (m *LogoutRequest) Reset()         { *m = LogoutRequest{} }
func (m *LogoutRequest) String() string { return proto.CompactTextString(m) }
func (*LogoutRequest) ProtoMessage()    {}

func (m *LogoutRequest) GetSessionId() *mnemosyne1.ID {
	if m != nil {
		return m.SessionId
	}
	return nil
}

type LogoutResponse struct {
}

func (m *LogoutResponse) Reset()         { *m = LogoutResponse{} }
func (m *LogoutResponse) String() string { return proto.CompactTextString(m) }
func (*LogoutResponse) ProtoMessage()    {}

type RegisterRequest struct {
}

func (m *RegisterRequest) Reset()         { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()    {}

type RegisterResponse struct {
}

func (m *RegisterResponse) Reset()         { *m = RegisterResponse{} }
func (m *RegisterResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterResponse) ProtoMessage()    {}

type ConfirmRegistrationRequest struct {
}

func (m *ConfirmRegistrationRequest) Reset()         { *m = ConfirmRegistrationRequest{} }
func (m *ConfirmRegistrationRequest) String() string { return proto.CompactTextString(m) }
func (*ConfirmRegistrationRequest) ProtoMessage()    {}

type ConfirmRegistrationResponse struct {
}

func (m *ConfirmRegistrationResponse) Reset()         { *m = ConfirmRegistrationResponse{} }
func (m *ConfirmRegistrationResponse) String() string { return proto.CompactTextString(m) }
func (*ConfirmRegistrationResponse) ProtoMessage()    {}

type RecoverPasswordRequest struct {
}

func (m *RecoverPasswordRequest) Reset()         { *m = RecoverPasswordRequest{} }
func (m *RecoverPasswordRequest) String() string { return proto.CompactTextString(m) }
func (*RecoverPasswordRequest) ProtoMessage()    {}

type RecoverPasswordResponse struct {
}

func (m *RecoverPasswordResponse) Reset()         { *m = RecoverPasswordResponse{} }
func (m *RecoverPasswordResponse) String() string { return proto.CompactTextString(m) }
func (*RecoverPasswordResponse) ProtoMessage()    {}

type ConfirmPasswordRecoveryRequest struct {
}

func (m *ConfirmPasswordRecoveryRequest) Reset()         { *m = ConfirmPasswordRecoveryRequest{} }
func (m *ConfirmPasswordRecoveryRequest) String() string { return proto.CompactTextString(m) }
func (*ConfirmPasswordRecoveryRequest) ProtoMessage()    {}

type ConfirmPasswordRecoveryResponse struct {
}

func (m *ConfirmPasswordRecoveryResponse) Reset()         { *m = ConfirmPasswordRecoveryResponse{} }
func (m *ConfirmPasswordRecoveryResponse) String() string { return proto.CompactTextString(m) }
func (*ConfirmPasswordRecoveryResponse) ProtoMessage()    {}

type IsGrantedRequest struct {
}

func (m *IsGrantedRequest) Reset()         { *m = IsGrantedRequest{} }
func (m *IsGrantedRequest) String() string { return proto.CompactTextString(m) }
func (*IsGrantedRequest) ProtoMessage()    {}

type IsGrantedResponse struct {
}

func (m *IsGrantedResponse) Reset()         { *m = IsGrantedResponse{} }
func (m *IsGrantedResponse) String() string { return proto.CompactTextString(m) }
func (*IsGrantedResponse) ProtoMessage()    {}

type HasPrivilegesRequest struct {
}

func (m *HasPrivilegesRequest) Reset()         { *m = HasPrivilegesRequest{} }
func (m *HasPrivilegesRequest) String() string { return proto.CompactTextString(m) }
func (*HasPrivilegesRequest) ProtoMessage()    {}

type HasPrivilegesResponse struct {
}

func (m *HasPrivilegesResponse) Reset()         { *m = HasPrivilegesResponse{} }
func (m *HasPrivilegesResponse) String() string { return proto.CompactTextString(m) }
func (*HasPrivilegesResponse) ProtoMessage()    {}

type CreateUserRequest struct {
}

func (m *CreateUserRequest) Reset()         { *m = CreateUserRequest{} }
func (m *CreateUserRequest) String() string { return proto.CompactTextString(m) }
func (*CreateUserRequest) ProtoMessage()    {}

type CreateUserResponse struct {
}

func (m *CreateUserResponse) Reset()         { *m = CreateUserResponse{} }
func (m *CreateUserResponse) String() string { return proto.CompactTextString(m) }
func (*CreateUserResponse) ProtoMessage()    {}

type GetUserRequest struct {
}

func (m *GetUserRequest) Reset()         { *m = GetUserRequest{} }
func (m *GetUserRequest) String() string { return proto.CompactTextString(m) }
func (*GetUserRequest) ProtoMessage()    {}

type GetUserResponse struct {
}

func (m *GetUserResponse) Reset()         { *m = GetUserResponse{} }
func (m *GetUserResponse) String() string { return proto.CompactTextString(m) }
func (*GetUserResponse) ProtoMessage()    {}

type GetUsersRequest struct {
}

func (m *GetUsersRequest) Reset()         { *m = GetUsersRequest{} }
func (m *GetUsersRequest) String() string { return proto.CompactTextString(m) }
func (*GetUsersRequest) ProtoMessage()    {}

type GetUsersResponse struct {
}

func (m *GetUsersResponse) Reset()         { *m = GetUsersResponse{} }
func (m *GetUsersResponse) String() string { return proto.CompactTextString(m) }
func (*GetUsersResponse) ProtoMessage()    {}

type DeleteUserRequest struct {
}

func (m *DeleteUserRequest) Reset()         { *m = DeleteUserRequest{} }
func (m *DeleteUserRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteUserRequest) ProtoMessage()    {}

type DeleteUserResponse struct {
}

func (m *DeleteUserResponse) Reset()         { *m = DeleteUserResponse{} }
func (m *DeleteUserResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteUserResponse) ProtoMessage()    {}

type ModifyUserRequest struct {
}

func (m *ModifyUserRequest) Reset()         { *m = ModifyUserRequest{} }
func (m *ModifyUserRequest) String() string { return proto.CompactTextString(m) }
func (*ModifyUserRequest) ProtoMessage()    {}

type ModifyUserResponse struct {
}

func (m *ModifyUserResponse) Reset()         { *m = ModifyUserResponse{} }
func (m *ModifyUserResponse) String() string { return proto.CompactTextString(m) }
func (*ModifyUserResponse) ProtoMessage()    {}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for RPC service

type RPCClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
	IsGranted(ctx context.Context, in *IsGrantedRequest, opts ...grpc.CallOption) (*IsGrantedResponse, error)
	HasPrivileges(ctx context.Context, in *HasPrivilegesRequest, opts ...grpc.CallOption) (*HasPrivilegesResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	ModifyUser(ctx context.Context, in *ModifyUserRequest, opts ...grpc.CallOption) (*ModifyUserResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
}

type rPCClient struct {
	cc *grpc.ClientConn
}

func NewRPCClient(cc *grpc.ClientConn) RPCClient {
	return &rPCClient{cc}
}

func (c *rPCClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := grpc.Invoke(ctx, "/charon.RPC/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	out := new(LogoutResponse)
	err := grpc.Invoke(ctx, "/charon.RPC/Logout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) IsGranted(ctx context.Context, in *IsGrantedRequest, opts ...grpc.CallOption) (*IsGrantedResponse, error) {
	out := new(IsGrantedResponse)
	err := grpc.Invoke(ctx, "/charon.RPC/IsGranted", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) HasPrivileges(ctx context.Context, in *HasPrivilegesRequest, opts ...grpc.CallOption) (*HasPrivilegesResponse, error) {
	out := new(HasPrivilegesResponse)
	err := grpc.Invoke(ctx, "/charon.RPC/HasPrivileges", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := grpc.Invoke(ctx, "/charon.RPC/CreateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) ModifyUser(ctx context.Context, in *ModifyUserRequest, opts ...grpc.CallOption) (*ModifyUserResponse, error) {
	out := new(ModifyUserResponse)
	err := grpc.Invoke(ctx, "/charon.RPC/ModifyUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := grpc.Invoke(ctx, "/charon.RPC/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error) {
	out := new(GetUsersResponse)
	err := grpc.Invoke(ctx, "/charon.RPC/GetUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	err := grpc.Invoke(ctx, "/charon.RPC/DeleteUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RPC service

type RPCServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	IsGranted(context.Context, *IsGrantedRequest) (*IsGrantedResponse, error)
	HasPrivileges(context.Context, *HasPrivilegesRequest) (*HasPrivilegesResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	ModifyUser(context.Context, *ModifyUserRequest) (*ModifyUserResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
}

func RegisterRPCServer(s *grpc.Server, srv RPCServer) {
	s.RegisterService(&_RPC_serviceDesc, srv)
}

func _RPC_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RPCServer).Login(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RPC_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RPCServer).Logout(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RPC_IsGranted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(IsGrantedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RPCServer).IsGranted(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RPC_HasPrivileges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(HasPrivilegesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RPCServer).HasPrivileges(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RPC_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RPCServer).CreateUser(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RPC_ModifyUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ModifyUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RPCServer).ModifyUser(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RPC_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RPCServer).GetUser(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RPC_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RPCServer).GetUsers(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RPC_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RPCServer).DeleteUser(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _RPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "charon.RPC",
	HandlerType: (*RPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _RPC_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _RPC_Logout_Handler,
		},
		{
			MethodName: "IsGranted",
			Handler:    _RPC_IsGranted_Handler,
		},
		{
			MethodName: "HasPrivileges",
			Handler:    _RPC_HasPrivileges_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _RPC_CreateUser_Handler,
		},
		{
			MethodName: "ModifyUser",
			Handler:    _RPC_ModifyUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _RPC_GetUser_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _RPC_GetUsers_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _RPC_DeleteUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
